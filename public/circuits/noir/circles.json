{"noir_version":"0.25.0+3f676051a6073d6eabdc7fee68e4b522334344f6","hash":4052411247015707348,"abi":{"parameters":[{"name":"input","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"input":[{"start":0,"end":2}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[1500]},"bytecode":"","debug_symbols":"","file_map":{"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"47":{"source":"use dep::noir_ml::{layers::fc, activations::poly, utils::arg_max};\n\nglobal w1: [Field; 20] = [16, -15, 13, -27, 26, -4, -16, -18, -8, 3, -7, 7, 10, 1, -13, -16, 2, 1, 12, -15];\nglobal b1: [Field; 10] = [20, -74, -82, -53, -91, 36, -216, -43, 219, -95];\n\nglobal w2: [Field; 20] = [10, 11, 6, 28, 13, -3, -6, 21, -19, 20, -14, -12, -14, -26, -10, -9, 5, -27, 11, -22];\nglobal b2: [Field; 2] = [0, 0];\n\nfn main(input: [Field; 2]) -> pub Field {\n    let output = input;\n    let output = poly(fc(output, w1, b1), 100);\n    let output = arg_max(fc(output, w2, b2));\n    output\n}\n\n////////////////////\n//     TESTS      //\n////////////////////\n#[test]\nfn test_circle_001() {\n    let sample = [3, 2];\n    assert(main(sample) == 1);\n}\n\n#[test]\nfn test_circle_002() {\n    let sample = [-3, -2];\n    assert(main(sample) == 1);\n}\n\n#[test]\nfn test_circle_003() {\n    let sample = [0, -10];\n    assert(main(sample) == 0);\n}\n\n#[test]\nfn test_circle_004() {\n    let sample = [3, -3];\n    assert(main(sample) == 1);\n}\n\n#[test]\nfn test_circle_005() {\n    let sample = [-2, 3];\n    assert(main(sample) == 1);\n}\n","path":"/Users/samarthshukla/Documents/coding/zk/noir/noir-ml/example_circuits/circle_fc/src/main.nr"},"51":{"source":"//! Activation Functions for Neural Networks in Noir\n//!\n//! This module contains activation functions commonly used in neural networks.\n//! The available functions are:\n//! - ReLU\n\nuse crate::utils::is_positive;\n\n/// ReLU (Rectified Linear Unit) Activation Function.\n/// y = max(0, x)\n///\n/// # Example\n/// ```\n/// let values = [-5, 2, 0];\n/// let activated = relu(values);\n/// assert_eq!(activated, [0, 2, 0]);\n/// ```\npub fn relu<N>(values: [Field; N]) -> [Field; N] {\n    let mut result = [0; N];\n\n    for i in 0..N {\n        if is_positive(values[i]) {\n            result[i] = values[i];\n        }\n    }\n    result\n}\n\npub fn poly<N>(values: [Field; N], scaling_factor: Field) -> [Field; N] {\n    let mut result = [0; N];\n\n    for i in 0..N {\n        result[i] = values[i] * values[i] + scaling_factor * values[i];\n    }\n    result\n}\n\n////////////////////\n//     TESTS      //\n////////////////////\n\n#[test]\nfn test_relu() {\n    assert(relu([-1, 0, 1]) == [0, 0, 1]);\n    let comp_constant = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n    assert(\n        relu([comp_constant - 1, comp_constant, comp_constant + 1])\n        == [comp_constant - 1, comp_constant, 0]\n    );\n}\n\n#[test]\nfn test_poly() {\n    assert(poly([-1, 0, 1, 2], 1) == [0, 0, 2, 6]);\n}\n","path":"/Users/samarthshukla/Documents/coding/zk/noir/noir-ml/noir_ml/src/activations.nr"},"52":{"source":"//! Utility Functions for Neural Network Operations in Noir\n//!\n//! This module provides a set of utility functions to aid in neural network computations.\n//! This includes:\n//! - Checking if a `Field` value is positive or negative\n//! - Checking if one `Field` value is greater than another\n//! - Finding the index of the maximum value in an array of `Field` values\n\n// check if a field element is positive by comparing it with the constant (p-1)/2\n// comp_constant = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\nglobal comp_constant_bytes = [0x00, 0x00, 0x00, 0xf8, 0xc9, 0xfa, 0xf0, 0xa1, 0x48, 0xb8, 0xdc, 0x3c, 0x24, 0xf4, 0x19, 0x94, 0x2e, 0xac, 0xc0, 0x40, 0xdb, 0x22, 0x28, 0xdc, 0x14, 0xd0, 0x98, 0x70, 0x39, 0x27, 0x32, 0x18];\n\n/// Determines if the given field value is positive.\n///\n/// # Example\n///\n/// ```\n/// let value: Field = 123;\n/// assert!(is_positive(value));\n/// ```\npub fn is_positive(value: Field) -> bool {\n    let value_bytes = value.to_le_bytes(32);\n\n    let mut result: bool = true;\n    let mut done: bool = false;\n\n    for i in 0..32 {\n        if !done {\n            let byte1 = value_bytes[31 - i] as u8;\n            let byte2 = comp_constant_bytes[31 - i] as u8;\n            if byte1 != byte2 {\n                done = true;\n                result = byte1 < byte2;\n            }\n        }\n    }\n    result\n}\n\n/// Determines if the given field value is negative.\n///\n/// # Example\n///\n/// ```\n/// let value: Field = -123;\n/// assert!(is_negative(value));\n/// ```\nfn is_negative(value: Field) -> bool {\n    let value_bytes = value.to_le_bytes(32);\n\n    let mut result: bool = false;\n    let mut done: bool = false;\n\n    for i in 0..32 {\n        if !done {\n            let byte1 = value_bytes[31 - i] as u8;\n            let byte2 = comp_constant_bytes[31 - i] as u8;\n            if byte1 != byte2 {\n                done = true;\n                result = byte1 > byte2;\n            }\n        }\n    }\n    result\n}\n\n/// Compares two field values and checks if the first is greater than the second.\n/// It does not check if the values are positive or negative.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 20;\n/// let value: Field = 10;\n/// assert!(is_greater_than(x, value));\n/// ```\nfn is_greater_than(x: Field, value: Field) -> bool {\n    let x_bytes = x.to_le_bytes(32);\n    let value_bytes = value.to_le_bytes(32);\n\n    let mut result: bool = false;\n    let mut done: bool = false;\n\n    for i in 0..32 {\n        if !done {\n            let byte1 = x_bytes[31 - i] as u8;\n            let byte2 = value_bytes[31 - i] as u8;\n            if byte1 != byte2 {\n                done = true;\n                result = byte1 > byte2;\n            }\n        }\n    }\n    result\n}\n\n/// Compares two signed field values and checks if the first is greater than the second.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 20;\n/// let value: Field = -10;\n/// assert!(is_greater_than_signed(x, value));\n/// ```\npub fn is_greater_than_signed(x: Field, value: Field) -> bool {\n    let x_is_positive = is_positive(x);\n    let value_is_positive = is_positive(value);\n\n    if (x_is_positive == value_is_positive) {\n        is_greater_than(x, value)\n    } else {\n        x_is_positive > value_is_positive\n    }\n}\n\n/// Returns the index of the maximum value in the given array of field values.\n///\n/// # Example\n///\n/// ```\n/// let values: [Field; 5] = [1, 3, 5, 2, 4];\n/// assert_eq!(arg_max(values), 2);\n/// ```\npub fn arg_max<N>(values: [Field; N]) -> Field {\n    assert(N as u64 > 0);\n\n    let mut max_index = 0 as Field;\n    let mut max_value = values[0];\n\n    for i in 1..N {\n        let value = values[i];\n        if is_greater_than_signed(value, max_value) {\n            max_value = value;\n            max_index = i as Field;\n        }\n    }\n    max_index\n}\n\n////////////////////\n//     TESTS      //\n////////////////////\n\n#[test]\nfn test_is_positive() {\n    assert(is_positive(0) == true); //0 is positive\n    assert(is_positive(1) == true);\n    assert(is_positive(-1) == false);\n    let comp_constant = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n    assert(is_positive(comp_constant) == true);\n    assert(is_positive(comp_constant - 1) == true);\n    assert(is_positive(comp_constant + 1) == false);\n}\n\n#[test]\nfn test_is_negative() {\n    assert(is_negative(0) == false);\n    assert(is_negative(1) == false);\n    assert(is_negative(-1) == true);\n    let comp_constant = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n    assert(is_negative(comp_constant) == false);\n    assert(is_negative(comp_constant - 1) == false);\n    assert(is_negative(comp_constant + 1) == true);\n}\n\n#[test]\nfn test_is_greater_than() {\n    assert(is_greater_than(2, 0));\n    assert(is_greater_than(-1, 2));\n    assert(!is_greater_than(2, 2));\n    assert(!is_greater_than(2, 3));\n}\n\n#[test]\nfn test_is_greater_than_signed() {\n    assert(is_greater_than_signed(2, 1));\n    assert(is_greater_than_signed(1, -1));\n    assert(is_greater_than_signed(-10, -11));\n    assert(!is_greater_than_signed(-1, 1));\n    assert(!is_greater_than_signed(-3, -2));\n}\n\n#[test]\nfn test_arg_max() {\n    assert(arg_max([1]) == 0);\n    assert(arg_max([1, 2]) == 1);\n    assert(arg_max([2, 1]) == 0);\n    assert(arg_max([3, 2, 5, 1, 4]) == 2);\n    assert(arg_max([-1, 1]) == 1);\n    assert(arg_max([1, -1]) == 0);\n    assert(arg_max([-3, -2, -5, -1, -4]) == 3);\n}\n","path":"/Users/samarthshukla/Documents/coding/zk/noir/noir-ml/noir_ml/src/utils.nr"}}}